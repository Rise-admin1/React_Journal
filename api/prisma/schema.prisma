// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}



model User {
   id        String    @id @default(uuid())
  email   String   @unique
  password String
  title    String
  surname  String
  resetToken String @default("0") @db.VarChar(255)
  otherName String
  affiliation String  
  test String @default("test")
  isAdmin  Boolean  @default(false)
  value String
  emailVerificationToken String @unique
  emailVerified Boolean @default(false)
  label String

  articles Article[]
  issuePurchased FullIssue[]
  userFullIssue UserFullIssue[]
  
subscriptions Subscription[]
  createdAt DateTime @default(now())
}

model Subscription {
  id             String    @id @default(uuid())
  isSubscribed    Boolean
  subscriptionPeriodStart Int 
  subscriptionAmmount Int
  subscriptionEmail String
  hosted_invoice_url String
  hosted_invoice_pdf String
  subscriptionPeriodEnd   Int 
  subscriptionDescription String @default("Weekly Subscription")
  subscriptionInterval String
  invoiceId String
  customerId String
  
  // Define the one-to-one relationship with User
  user            User     @relation(fields: [userId], references: [id])
  userId          String
}

model Journal{
    id        String    @id @default(uuid())
  journalTitle   String   @unique
  journalImageURL String
  journalAbbreviation String
  journalLanguage String
  journalISSN String
  journalDOI String
  journalStartYear Int
  journalStartMonth Int
  journalPublishedArticles Int @default(0)
  articles Article[]
  fullIssue FullIssue[]
  createdAt DateTime @default(now())
}




model Article {
    id        String    @id @default(uuid())
  articleTitle              String
  articleAbstract           String @db.VarChar(3000)
  articleKeywords           String
  articleAuthors            Json
  filesURL                  Json
  articleIssue             Int
  articleVolume            Int
  paymentStatus             Boolean @default(false)
  rejectionFilesURL         Json
  publicPdfName             String
  awsId                     String
  rejectionText             String @default("")
  specialReview             Boolean
  isReview                  Boolean @default(true)
  isPublished               Boolean @default(false)
  isAccepted                Boolean @default(false)
  articleStatus             String @default("In Review")
  articleReceivedDate       DateTime @default(now())
  articleAcceptedDate       DateTime @updatedAt
  articlePublishedDate      DateTime @updatedAt
  journalId                 String
  articlePublishedJournal   Journal @relation(fields: [journalId], references: [id])
  userId                    String
  articlePublishedUser      User     @relation(fields: [userId], references: [id])
  createdAt                 DateTime @default(now())
}

model FullIssue{
  id        String    @id @default(uuid())
  issueImageURL String
  issueDoccumentURL String
  issuePrice String
  journalId String
  issueJournal Journal @relation(fields: [journalId], references: [id])
  issueVolume Int
  issueNumber Int
  issuePaidUsers User[]
  issueCount Int @default(0)
  userFullIssue UserFullIssue[]
  createdAt                 DateTime @default(now())
}
model UserFullIssue{
   userId      String
  user        User      @relation(fields: [userId], references: [id])

  fullIssueId String
  fullIssue   FullIssue @relation(fields: [fullIssueId], references: [id])

  @@id([userId, fullIssueId])
}

